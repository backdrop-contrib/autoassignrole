<?php
// $Id$

/**
 * @file
 * Creates tests for auto assign role module.
 */

/**
 * Extend the DrupalWebTestCase.
 */
class AutoassignroleAdminSettingsTestCase extends DrupalWebTestCase {
  protected $admin_user;

  public static function getInfo() {
    return array(
      'name' => 'Admin Settings',
      'description' => 'Tests the administrative setting for auto assign role',
      'group' => 'Auto assign role',
    );
  }

  function setUp() {
    parent::setUp('autoassignrole');
    $this->admin_user = $this->drupalCreateUser(array(
      'administer autoassignrole',
      'access administration pages',
    ));
    $permissions = array('access content');
    $this->drupalCreateRole($permissions);

    $this->roles = user_roles(TRUE);
    unset($this->roles[DRUPAL_AUTHENTICATED_RID]);
  }

  /**
   * Test admin setting functionality for autoassignrole_auto_active.
   * @see http://drupal.org/node/937468
   */
  function testAutoActiveSettings() {
    // Create a new user who can access the administration settings
    $this->drupalLogin($this->admin_user);

    // Check that the user can see the admin settings page.
    $this->drupalGet('admin/config/autoassignrole/auto');
    $this->assertField(
     'autoassignrole_auto_active',
     'The autoassignrole_auto_active field is accessible.'
    );

    // Enable autoassignrole_auto_active
    $edit['autoassignrole_auto_active'] = 1;
    $this->drupalPost(
      'admin/config/autoassignrole/auto',
      $edit,
      t('Save configuration')
    );

    // Verify autoassignrole_auto_active has been enabled
    $this->assertEqual(
      variable_get('autoassignrole_auto_active', 0),
      1,
      'autoassignrole_auto_active has been enabled'
    );

    // Disable autoassignrole_auto_active
    $edit['autoassignrole_auto_active'] = 0;
    $this->drupalPost(
      'admin/config/autoassignrole/auto',
      $edit,
      t('Save configuration')
    );

    // Verify autoassignrole_auto_active has been disabled
    $this->assertEqual(
      variable_get('autoassignrole_auto_active', 1),
      0,
      'autoassignrole_auto_active has been disabled'
    );
  }

  /**
   * Test admin setting functionality for autoassignrole_admin_active.
   * @see http://drupal.org/node/937666
   */
  function testAdminActiveSettings() {
    // Create a new user who can access the administration settings
    $this->drupalLogin($this->admin_user);

    // Check that the user can see the admin settings page.
    $this->drupalGet('admin/config/autoassignrole/auto');
    $this->assertField(
     'autoassignrole_admin_active',
     'The autoassignrole_auto_active field is accessible.'
    );

    // Enable autoassignrole_admin_active
    $edit['autoassignrole_admin_active'] = 1;
    $this->drupalPost(
      'admin/config/autoassignrole/auto',
      $edit,
      t('Save configuration')
    );

    // Verify autoassignrole_admin_active has been enabled
    $this->assertEqual(
      variable_get('autoassignrole_admin_active', 0),
      1,
      'autoassignrole_admin_active has been enabled'
    );

    // Disable autoassignrole_admin_active
    $edit['autoassignrole_admin_active'] = 0;
    $this->drupalPost(
      'admin/config/autoassignrole/auto',
      $edit,
      t('Save configuration')
    );

    // Verify autoassignrole_admin_active has been disabled
    $this->assertEqual(
      variable_get('autoassignrole_admin_active', 1),
      0,
      'autoassignrole_admin_active has been disabled'
    );
  }

  /**
   * Test admin setting functionality for autoassignrole_auto_roles.
   * @see http://drupal.org/node/937678
   */
  function testAutoRolesSettings() {
    // Create a new user who can access the administration settings
    $this->drupalLogin($this->admin_user);

    // Check that the user can see the admin settings page.
    $this->drupalGet('admin/config/autoassignrole/auto');

    // Verify that there are roles exposed.
    $this->assertField(
     'autoassignrole_auto_roles[3]',
     'Looking for the autoassignrole_auto_roles checkboxes.'
    );

    // Verify that a checkbox for each of our valid roles shows on the page.
    foreach ($this->roles as $rid => $role) {
      $edit["autoassignrole_auto_roles[$rid]"] = $rid;
    }

    // Check each of our roles and submit the form.
    $this->drupalPost(
      'admin/config/autoassignrole/auto',
      $edit,
      t('Save configuration')
    );

    // Verify the checked value was saved for each of our roles.
    $roles = variable_get("autoassignrole_auto_roles", array());
    foreach ($this->roles as $rid => $role) {
      $this->assertEqual(TRUE, array_key_exists($rid, $roles), 'Verifying that role (rid:' . $rid . ') was activated.');
    }
  }
}
